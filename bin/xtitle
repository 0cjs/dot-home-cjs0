#!/usr/bin/env bash

print_xt() {
    echo 'xt() { eval $($HOME/.local/bin/xtitle -e "$@"); }'
}

set_keyinfo() {
    declare -g keyinfo='no keys' 2>/dev/null || keyinfo='no keys'
                                              # Bash <4.2 has no `declare -g`

    #   `ssh-add -l` may take hundreds of milliseconds if it's talking
    #   to a forwarded agent over a slow connection. If this is being
    #   used in the Bash $PROMPT_COMMAND, long delays can be painful.
    #   Thus, ensure we get all the info we need in a single call.
    local -a keylist; local line
    while read line; do keylist+=("$line"); done < <(ssh-add -l 2>/dev/null)
    local keycount="${#keylist[@]}" key0="${keylist[0]}"

    #   Hack. `ssh-add` prints the error message on stdout if the agent
    #   has no identities loaded. We really should be checking the error
    #   code, but that's difficult to do when `ssh-add` is running in a
    #   subshell, so instead just check the message, which we hope doesn't
    #   change between different versions of `ssh-add`.
    [[ $key0 = 'The agent has no identities.' ]] && keycount=0

    [[ $keycount -ge 1 ]] || return
    keyinfo="$(echo "$key0" | \
        sed -e 's,.*/,,' -e 's,[- ].*,,' -e '2,$d')"
    [[ $keycount -gt 1 ]] && keyinfo="$(($keycount-1))+$keyinfo"
}

set_ckssh_keyinfo() {
    declare -g keyinfo='no keys' 2>/dev/null || keyinfo='no keys'
                                              # Bash <4.2 has no `declare -g`

    keyinfo="$(ckssh.py ckset -n 2>/dev/null)"
    [[ -z $keyinfo ]] && keyinfo='?'

    keycount=$(ssh-add -l 2>/dev/null \
        | grep -v 'The agent has no identities.' | wc -l)
    case $keycount in
        0)  keyinfo="(--$keyinfo--)";;
        1)  keyinfo="[$keyinfo]";;
        *)  keyinfo="[++$keyinfo++]";;
    esac
}

usage() {
    cat >&2 <<____
$(basename "$0") [-e] [NAME]
  Sets xterm terminal title to "[NAME] HOST DIR".
  NAME defaults to contents of the \$XTITLE environment variable.

  This is normally used through the \`xt()\` function (printed with
  \`-x\`) to set \$XTITLE=NAME in the environment so that subsequent
  calls that don't specify a name keep the previously set one, but
  update the host and current directory.

  -e  print XTITLE=... for evaluation in a shell (usually by \`xt()\` function)
  -k  don't get keyinfo; this may be much faster on slow networks
  -x  print definition of \`xt()\` function
____
    exit 2
}

####################################################################
#   Main

case "$TERM" in
    linux*)     : ;;
    xterm*)     : ;;
    rxvt*)      : ;;
    screen*)    : ;;
    tmux*)      : ;;
    *)          echo 1>&2 "$(basename $0): unknown terminal: $TERM"; exit 0;;
esac

host="$(uname -n | sed -e 's/\..*//')"
case $(echo $host) in
    priv|prod|stage|t?)
        first=$(uname -n | sed -e 's/\..*//')
        second=$(uname -n | sed -e 's/[^.]*\.//' -e 's/\..*//')
        host="$first.$second"
esac
[[ -n $HOST_HOSTNAME ]] && host="$host : $HOST_HOSTNAME"

dir=$(pwd -P | sed -e "s,$HOME,~," -e 's,.*/co/[^/]*/,,')/

echo_xtitle=false
get_keyinfo=true
while true; do case "$1" in
    -e) shift; echo_xtitle=true;;
    -k) shift; get_keyinfo=false;;
    -x) shift; print_xt; exit 0;;
    -*) echo 2>&1 "$(basename $0): Unkown option: $1"; usage;;
     *) break;;
esac; done
[[ $# -gt 0 ]] && XTITLE="$*"

keyinfo='?'
$get_keyinfo && set_ckssh_keyinfo

esc=$(echo -n _ | tr _ '\033')
bel=$(echo -n _ | tr _ '\007')

blank='        '
echo >/dev/tty -n "$esc]0;${XTITLE:-$blank} | $host | $keyinfo | $dir$bel"
$echo_xtitle && echo "export XTITLE='$XTITLE'"
exit 0
