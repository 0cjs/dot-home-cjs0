#!/usr/bin/env sh

upgrade() {
    case $ID in
        debian|ubuntu)
            [ -x /usr/bin/apt-get ] || err "Can't find apt-get."
            echo ===== apt-get update
            $dry sudo apt-get -q -q update || err apt-get update failed
            echo ===== apt-get dist-upgrade
            $dry sudo apt-get -q dist-upgrade || err apt-get dist-upgrade failed
            ;;
        *)
            err "Don't know how to upgrade $ID";;
    esac
}

install() {
    $note "Installing group '$install_group' packages"
    packages=$(
        #   `while` reading from a pipeline creates a subshell so any variable
        #   settings we make in that loop are lost. Thus we print output and
        #   collect it with $() syntax.
        sed -n -e 's/#.*//' -e "s/^${install_group}  *//p" \
            $HOME/.local/share/distro/packages \
        | while read package systems; do
            echo "$systems" | grep -qwEi "$ID\.($VERSION_ID|\*)" \
                && echo -n "$package" ''    # space-separated list
        done
    )
    case $ID in
        debian|ubuntu)
            [ -x /usr/bin/apt-get ] || err "Can't find apt-get."
            echo ===== apt-get update
            $dry sudo apt-get -q -q update || err apt-get update failed
            echo ===== apt-get install
            $dry sudo apt-get -q install $packages || err apt-get install failed
            ;;
        *)
            err "Don't know how to install $ID";;
    esac
}

distro_name() {
    if [ -x /usr/bin/lsb_release ]
        then lsb_release -s -i | tr A-Z a-z
        else echo "unknown"
        fi
}

distro_release() {
    [ -r /etc/os-release ] && {         # systemd
        . /etc/os-release
        echo $VERSION_ID
        return
    }
    if [ -x /usr/bin/lsb_release ]
        then echo $(lsb_release -s -r)
        else echo "unknown"
        fi
}

distro_release_verbose() {
    if [ -x /usr/bin/lsb_release ]
        then echo $(lsb_release -s -d)
        else echo "unknown"
        fi
}

err() {
    local retval=$?
    echo 1>&2 ERROR: "$@"
    if [ $retval -eq 0 ]; then exit 1; else exit $retval; fi
}
warn() { echo 1>&2 "$@"; }

help() {
    echo "Usage: $(basename $0) [-h | -u | -i]"
    echo "   (no arg): print OS/distribution name and release number"
    echo "   -d: dry run: print what would be done for -i/-s/-u etc."
    echo "   -h: print this help"
    echo "   -i <group>: install <group> packages on this system"
    echo "   -n: print distribution name"
    echo "   -r: print distribution release (version) number"
    echo "   -u: upgrade all packages on this system"
}

unset ID VERSION_ID PRETTY_NAME
if [ -r /etc/os-release ]; then
    . /etc/os-release
else
    ID=$(distro_name)
    VERSION_ID=$(distro_release)
    PRETTY_NAME=$(distro_release_verbose)
fi

command='echo "$ID $VERSION_ID"'
dry=''; note=':'
while [ $# -gt 0 ]; do case "$1" in
    -d) dry='echo EXEC:'; note='echo NOTE:';;
    -h) command='help';;
    -i) shift; command='install'; install_group="$1";;
    -n) command='echo $ID';;
    -r) command='echo "$VERSION_ID"';;
    -u) command='upgrade';;
    -v) command='echo "$PRETTY_NAME"';;
    *)  warn "Unknown argument: '$1'"; help; exit 2;;
esac; shift; done
eval "$command"
