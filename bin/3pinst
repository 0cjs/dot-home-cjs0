#!/usr/bin/env bash
#
#   3pinst - install 3rd-party (non-distro) Linux packages
#
#   This installs packages from third parties (i.e., not Debian or
#   whomever your distro provider is). It includes things that:
#   • install entirely under $HOME
#   • install using the native packaging system, but with packages from
#     another source
#
set -Eeuo pipefail

trap 'die 1 "FAILURE during install"' ERR

die() {
    local exitcode="$1"; shift
    echo 2>&1 "$(basename "$0"):" "$@"
    completed=true
    exit "$exitcode"
}

####################################################################
#   Desktop browse/chat apps

inst_chrome() {
    #   XXX not actually a $HOME install!
    local fname='google-chrome-stable_current_amd64.deb'
    local urlloc='https://dl.google.com/linux/direct/'
    curl -L -o ~/Downloads/"$fname" "$urlloc/$fname"
    sudo apt-get install ~/Downloads/"$fname"
}

inst_telegram() {
    #   The final response after redirection does not include a
    #   content-disposition header so -J does not work to pick the correct
    #   filename. Instead, we first get the final URL (after redirections)
    #   and then download that directly with -O.
    url=$(curl -L -s --head -o /dev/null -w %{url_effective} \
        https://telegram.org/dl/desktop/linux)
    echo "Redirect: $url"

    cd ~/.local/bin/
    curl "$url" | tar -v -J --strip-components=1 -x -f -
}

inst_discord() {
    local url="https://discord.com/api/download?platform=linux&format=deb"
    #   The filename they supply in Content-disposition is `download`. :-(
    curl -L -o ~/Downloads/discord.deb "$url"
    sudo apt-get install ~/Downloads/discord.deb
}

inst_slack() {
    #   XXX not actually a $HOME install!
    #   It's actually the 'try again' link on this page, to be parsed out:
    #   (look for <a> with href= containing .deb/
    #   https://slack.com/downloads/instructions/linux?ddl=1&build=deb
    #   Note: a double-slash (//) in URL will fail to download.
    local fname='slack-desktop-4.38.125-amd64.deb'
    local urlloc='https://downloads.slack-edge.com/desktop-releases/linux/x64/4.38.125'
    curl -L -o ~/Downloads/"$fname" "$urlloc/$fname"
    sudo apt-get install ~/Downloads/"$fname"
}

####################################################################
#   Development tools

#   XXX We no longer use this, but use pae/pactivate instead.
inst_pip() {
    local req=python3-distutils     # required only on Debian 11
    #   Cannot use grep -q here because it fails with 141 (pipe broken?)
    if  apt-cache pkgnames $req | grep "^$req\$" >/dev/null \
        && ! dpkg -s $req >/dev/null
    then
        sudo apt-get install $req
    fi

    local getpip=~/Downloads/get-pip.py
    curl --create-dirs -o "$getpip" https://bootstrap.pypa.io/get-pip.py
    python3 "$getpip" --user
}

inst_pythonz() {
    #   This list from README at: https://github.com/saghul/pythonz
    sudo apt-get install build-essential \
        zlib1g-dev libbz2-dev libssl-dev libreadline-dev libncurses5-dev \
        libsqlite3-dev libgdbm-dev libdb-dev libexpat-dev libpcap-dev \
        liblzma-dev libpcre3-dev libffi-dev
    curl -L https://raw.github.com/saghul/pythonz/master/pythonz-install | bash
}

inst_nodejs() {
    # Filename format: node-v8.9.4-linux-x64.tar.xz
    local url=$(
        curl -s -L https://nodejs.org/en/download/ \
        | sed -ne 's/.*"\(https:[^"]*-linux-x64[^"]*\)".*/\1/p'
        )
    [[ -n $url ]] || die 1 "Can't find latest stable nodejs version"
    local filename="$(basename "$url")"
    local version="${filename#node-}"
          version="${version%%-*}"
    echo "Latest version: $version"
    [[ $(node --version) = $version ]] && { echo "No update needed."; return; }
    local tarball=~/Downloads/"$filename"
    if [[ -r $tarball ]]; then
        echo "Skipping download; found $tarball"
    else
        curl --create-dirs -o "$tarball" "$url"
    fi
    cd ~/.local/ || die 1 "Can't cd ~/.local/"
    tar --strip-components=1 -xf "$tarball"
}

####################################################################
#   Main

usage() {
    echo "Usage: $(basename "$0") PACKAGE"
    echo "Packages: $(set | sed -ne 's/^inst_//p' \
        | sed -ne 's/ () *//p' | tr '\n' ' ')"
}

[[ $# -eq 0 ]] && { usage; exit 1; }
[[ $1 = -h ]]  && { usage; exit 0; }
[[ $# -gt 1 ]] && { die 2 'Takes only one argument'; }
[[ $(type -t inst_$1) == function ]] || die 2 "Unknown package: $1"
inst_$1
